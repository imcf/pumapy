"""Module-wide fixtures for testing pumapy."""

# TODO: pylint for Python2 complains about redefining an outer scope when using
# pytest fixtures, this is supposed to be fixed in newer versions, so it should
# be checked again after migration to Python3 (see pylint issue #1535):
# pylint: disable-msg=redefined-outer-name

import pytest

from pumapy.user import PpmsUser

__author__ = "Niko Ehrenfeuchter"
__copyright__ = __author__
__license__ = "gpl3"


@pytest.fixture(scope="module")
def user_details_raw():
    """A dict with default user details matching a parsed API response.

    Provides a dict with user details that corresponds to the same format that
    is generated by the PpmsUser.from_response() constructor.

    Returns
    -------
    dict
    """
    return {
        u'active': True,
        u'affiliation': u'',
        u'bcode': u'',
        u'email': u'pumapy@python-facility.example',
        u'fname': u'PumAPI',
        u'lname': u'Python',
        u'login': u'pumapy',
        u'mustchbcode': False,
        u'mustchpwd': False,
        u'phone': u'+98 (76) 54 3210',
        u'unitlogin': u'pumapy_group'
    }


@pytest.fixture(scope="module")
def user_details(user_details_raw):
    """A dict with user details and some additional details used in testing.

    Provides a dict with user details (same as the user_details_raw() fixture),
    enriched with some more details that are useful for the related tests.

    Returns
    -------
    dict
        The same dict as provided by the `user_details_raw` fixture extended by
        the keys 'fullname', 'expected' and 'api_response'.
    """
    details = user_details_raw.copy()
    details['fullname'] = "%s %s" % (details['lname'], details['fname'])
    details['expected'] = (
        'username: %s, email: %s, fullname: %s, ppms_group: %s, active: True' %
        (details['login'], details['email'], details['fullname'],
         details['unitlogin'])
    )
    details['api_response'] = (
        u'login,lname,fname,email,phone,bcode,affiliation,'
        u'unitlogin,mustchpwd,mustchbcode,active\r\n'
        '"%s","%s","%s","%s","%s","","","%s",false,false,true\r\n' %
        (details['login'], details['lname'], details['fname'],
         details['email'], details['phone'], details['unitlogin'])
    )

    return details


@pytest.fixture(scope="module")
def group_details():
    """Helper function providing a dict with default group details.

    Returns
    -------
    dict
    """
    return {
        u'heademail': u'group-leader@python-facility.example',
        u'unitname': u'Python Core Facility',
        u'unitlogin': u'pumapy_group',
        u'unitbcode': u'pumapy_group',
        u'department': u'Scientific Software Support',
        u'headname': u'PythonGroup Supervisor',
        u'active': True,
        u'institution': u'Famous Research Foundation',
    }


@pytest.fixture(scope="module")
def ppms_user(user_details):
    """Helper function to create a PpmsUser object with default values.

    Parameters
    ----------
    user_details : dict
        A dictionary with user details.

    Returns
    -------
    pumapy.user.PpmsUser
    """
    return PpmsUser(
        username=user_details['login'],
        email=user_details['email'],
        fullname=user_details['fullname'],
        ppms_group=user_details['unitlogin']
    )


@pytest.fixture(scope="module")
def ppms_user_from_response(user_details):
    """Helper function to create a PpmsUser object with default values.

    Parameters
    ----------
    user_details : dict
        A dictionary with user details.

    Returns
    -------
    pumapy.user.PpmsUser
    """
    return PpmsUser.from_response(user_details['api_response'])
