# This file is used to configure your project.
# Read more about the various options under:
# http://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files

[metadata]
name = pumapy
version = attr:pumapy.__version__
description = A Python 2 package to communicate with a Stratocore PUMAPI instance.
author = Niko Ehrenfeuchter
author-email = nikolaus.ehrenfeuchter@unibas.ch
license = gpl3
url = https://github.com/imcf/pumapy
long-description = file: README.md
long-description-content-type = text/markdown
platforms = any
# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers =
    Development Status :: 5 - Production/Stable
    Intended Audience :: Developers
    License :: OSI Approved :: GNU General Public License v3 (GPLv3)
    Programming Language :: Python
    Programming Language :: Python :: 2.7
    Topic :: Utilities

[options]
zip_safe = False
packages = find:
include_package_data = True
package_dir =
    =src

# Add here dependencies of your project (semicolon/line-separated), e.g.
install_requires = requests

# Require a specific Python version, e.g. Python 2.7 or >= 3.4
python_requires = >=2.7,<=3.0

[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install pumapy[PDF]` like:
# PDF = ReportLab; RXP
# Add here test requirements (semicolon/line-separated)
testing =
    pytest
    pytest-cov

[options.entry_points]
# Add here console scripts like:
# console_scripts =
#     script_name = pumapy.utils:some_function
# For example:
# console_scripts =
#     pumapy_get_users = pumapy.utils:get_users

[test]
# pytest options when running `python setup.py test`
# addopts = --verbose
extras = True

[tool:pytest]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output
addopts =
    --cov pumapy --cov-report html
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests

[aliases]
build = bdist_wheel

[bdist_wheel]
# Use this option if your package is pure-python
universal = 1

[build_sphinx]
source_dir = docs/source
build_dir = docs/build

[flake8]
# Some sane defaults for the code style checker flake8
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py
